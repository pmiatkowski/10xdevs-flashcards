name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build and Test"]
    branches: [master]
    types: [completed]
  # Możliwość ręcznego uruchomienia
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    # Uruchamiaj tylko gdy workflow Build and Test zakończył się sukcesem
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: ./.github/actions/setup-node-js

      - name: Build project
        run: npm run build
        env:
          PUBLIC_SUPABASE_URL: ${{ vars.PUBLIC_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PUBLIC_SUPABASE_ANON_KEY }}

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t registry.digitalocean.com/fiszki/app:$(echo $GITHUB_SHA | head -c7) .
          docker build -t registry.digitalocean.com/fiszki/app:latest .

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push registry.digitalocean.com/fiszki/app:$(echo $GITHUB_SHA | head -c7)
          docker push registry.digitalocean.com/fiszki/app:latest

      - name: Deploy to DigitalOcean App Platform
        run: |
          doctl apps update ${{ secrets.DIGITALOCEAN_APP_ID }} --spec .do/app.yaml --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Verify deployment
        run: |
          doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format ActiveDeployment.Phase --no-header

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = {
              environment: 'production',
              state: 'success',
              target_url: '${{ vars.PRODUCTION_URL }}',
              description: 'Deployed successfully!'
            };

            try {
              await github.rest.repos.createDeploymentStatus({
                ...context.repo,
                deployment_id: context.payload.deployment ? context.payload.deployment.id : 'latest',
                ...deployment
              });
              console.log('Deployment status created successfully');
            } catch (error) {
              console.error('Failed to create deployment status', error);
            }
